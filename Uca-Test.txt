Q1: Find First and Last Position of Element in Sorted Array
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int l = lower_bound(nums.begin(), nums.end(), target) - nums.begin();
        int u = upper_bound(nums.begin(), nums.end(), target) - nums.begin();
        if(l == u) return {-1, -1};
        else return {l, u - 1};
    }
};

Q2: Merge Intervals
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> ans;
        int indx = 0;
        sort(intervals.begin(), intervals.end());
        ans.push_back(intervals[0]);
        for(auto s : intervals){
            cout << s[0] << " " << s[1] << "\n";
        }
        for(int i = 1; i < intervals.size(); i++) {
            if(ans[indx][1] >= intervals[i][0]) {
                ans[indx][1] = max(ans[indx][1], intervals[i][1]);
            }
            else{
                ans.push_back(intervals[i]);
                indx++;
            }
        }
        return ans;
    }
};
